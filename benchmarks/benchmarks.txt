Note:
To run the benchmark, insert the main function into main.cpp and run

// --------------------------------------------
// Unit tests

int main(int numArguments, char **arguments)
{
    int numTimesteps = 1500;
    //if(numArguments >= 2) numTimesteps = atoi(arguments[1]);

    SolarSystem solarSystem;



    // Sun
    CelestialBody &sun = solarSystem.createCelestialBody( vec3(0,0,0), vec3(0,0,0), 1.0 );

    solarSystem.createCelestialBody( vec3(1, 0, 0), vec3(0, 2*M_PI, 0), 3e-6 );

    double max_kin = 0;
    double max_pot = 0;
    double max_tot = 0;
    double max_ang = 0;

    double min_kin = 1;
    double min_pot = 1;
    double min_tot = 1;
    double min_ang = 1;

    arma::mat dE_mat = arma::zeros<arma::mat>(numTimesteps,4);

    double dt = 0.001;
    Solver integrator(dt);
    for(int timestep=0; timestep<numTimesteps; timestep++) {
        integrator.Verlet(solarSystem);


        dE_mat(timestep,0) = solarSystem.totalEnergy();
        dE_mat(timestep,1) = solarSystem.kineticEnergy();
        dE_mat(timestep,2) = solarSystem.potentialEnergy();
        dE_mat(timestep,3) = solarSystem.angularMomentum()[2];

    }


    cout << "The maximum error for total energy conservation is " << abs ((dE_mat.col(0).max() - dE_mat.col(0).min())/dE_mat.col(0).max()) << endl;
    cout << "The maximum error for kinetic energy conservation is "<< abs ((dE_mat.col(1).max() - dE_mat.col(1).min())/dE_mat.col(1).max())<< endl;
    cout << "The maximum error for potenial energy conservation is "<< abs ((dE_mat.col(2).max() - dE_mat.col(2).min())/dE_mat.col(2).max()) << endl;
    cout << "The maximum error for the angular momentum is "<< abs ((dE_mat.col(3).max() - dE_mat.col(3).min())/dE_mat.col(3).max()) << endl;

return 0;
}




// -------------------------------------------------------------------------
// Terminal ouput

The maximum error for total energy conservation is 8.63264e-08
The maximum error for kinetic energy conservation is 2.74778e-05
The maximum error for potenial energy conservation is 1.37391e-05
The maximum error for the angular momentum is 3.82152e-05






// -----------------------------------------------------------------------
// Benchmarks. Verlet for three-body system

int main(int numArguments, char **arguments)
{


    int numTimesteps = 130000;

    SolarSystem solarSystem;



    // Declere the planet's coordinates.
    vec3 r_sun = vec3(3.569552387089993E-03, 3.395883113303513E-03, -1.598805663679657E-04);
    vec3 r_earth = vec3(9.419288875250327E-01, 3.422743349115224E-01, -1.774653038679687E-04);
    vec3 r_jupiter = vec3(-5.429616996509673E+00, -4.392482185767863E-01, 1.232526518227290E-01);


    // Declare the masses
    double mSun = 1.0;
    double mEarth = 3e-6;
    double mJupiter = 1e-3;


    // Declare the velocities
    vec3 v_sun = vec3(-1.978871917569178E-06, 6.843726881579374E-06, 4.032140462891743E-08)*365;
    vec3 v_earth = vec3(-6.128263831462272E-03, 1.611761267097599E-02, 1.349643765318894E-07)*365;
    vec3 v_jupiter = vec3(5.206515353907882E-04, -7.164038754622682E-03, 1.814205403145239E-05)*365;



    // Adding celastial bodies


    // Three body system

    // Sun
    solarSystem.createCelestialBody(r_sun, v_sun, mSun);

    // Earth
    solarSystem.createCelestialBody( r_earth, v_earth, mEarth);

    // Jupiter
    solarSystem.createCelestialBody( r_jupiter, v_jupiter, mJupiter);



    double dt = 0.001;
    Solver integrator(dt);
    for(int timestep=0; timestep<numTimesteps; timestep++) {
        integrator.Verlet(solarSystem);
        solarSystem.writeToFile("../solar-system/earthwjupiter.txt",timestep);
    }

    cout << "The kinetic energy is " << solarSystem.kineticEnergy() << endl;
    cout << "The potential energy is " << solarSystem.potentialEnergy() << endl;
    cout << "The total energy is " << solarSystem.totalEnergy() << endl;
    cout << "The angular momementum is " << solarSystem.angularMomentum() << endl;

    return 0;



}

// ---------------------------------------
// Terminal output

The kinetic energy is 0.00350641
The potential energy is -0.00736576
The total energy is -0.00385935
The angular momementum is [0.000653109, 0.000120263, 0.0289511];








// ----------------------------------------------------------------
// Benchmark. Euler for two-body system




int main(int numArguments, char **arguments)
{


    int numTimesteps = 1500;

    SolarSystem solarSystem;




    // Adding celastial bodies

    // Two body system

    // Sun
    CelestialBody &sun = solarSystem.createCelestialBody( vec3(0,0,0), vec3(0,0,0), 1.0 );

    // Earth
    solarSystem.createCelestialBody( vec3(1, 0, 0), vec3(0, 2*M_PI, 0), 3e-6 );



    double dt = 0.001;
    Solver integrator(dt);
    for(int timestep=0; timestep<numTimesteps; timestep++) {
        integrator.Euler(solarSystem);


    }


    cout << "The kinetic energy is " << solarSystem.kineticEnergy() << endl;
    cout << "The potential energy is " << solarSystem.potentialEnergy() << endl;
    cout << "The total energy is " << solarSystem.totalEnergy() << endl;
    cout << "The angular momementum is " << solarSystem.angularMomentum()[2] << endl;

    return 0;



}

// Terminal output
// ------------------------------------------------------------
The kinetic energy is 5.41733e-05
The potential energy is -0.000107645
The total energy is -5.34717e-05
The angular momementum is 1.98336e-05
